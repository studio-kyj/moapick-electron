import { app, BrowserWindow, ipcMain } from "electron";
import Nedb from "nedb";
import { v4 as uuidv4 } from "uuid";
import path from "path";
import os from "os";
import fs from "fs";
import iconv from "iconv-lite";
import crawling from "./crawling";
import axios, { AxiosResponse } from "axios";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: false,
      nodeIntegration: true,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
  mainWindow.webContents.on("did-finish-load", () => {
    mainWindow.webContents.send("ping", "whoooooooh!");
  });
};

app.whenReady().then(() => {
  createWindow();

  // app.on("activate", function () {
  //   if (BrowserWindow.getAllWindows().length === 0) createWindow();
  //   app.openDevTools();
  // });

  // onInputValue 이벤트 수신
  ipcMain.on("login", async (evt, payload) => {
    console.log("login", payload);
    try {
      const { id, password } = payload;
      const result = await crawling(id, password);

      //TODO: DB에 result 저장
      evt.reply("success", result);
    } catch (error) {
      console.error(error);
    }
  });
});

app.on("window-all-closed", function () {
  if (process.platform !== "darwin") app.quit();
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

//Local에 저장
const homedir = os.homedir();
const folderPath = path.join(homedir, "moapick-backdata",);
const dbPath = path.join(folderPath, "applicants.json");
if (!fs.existsSync(folderPath)) {
  fs.mkdirSync(folderPath);
}
//DB 인스턴스 생성
const db = new Nedb({
  filename: dbPath,
  autoload: true,
});
const id = uuidv4();

// fs.readFile('./applicants.json', 'utf8', function(err, data) {
//   console.log(data)
//   console.log(JSON.parse(data))
// });

const applicantData = {
  id: id,
  name: "시아준",
  email: "xia@gmail.com",
  phone: "01011112222",
  title: "테스트",
  filename: "resume1.pdf",
  fileurl:
    "https://blog.kakaocdn.net/dn/C8kUo/btqEjCGNiq2/oENoAsTJvcqtdgykO7xqIk/SQLD_34_%EA%B8%B0%EC%B6%9C%EB%AC%B8%EC%A0%9C.pdf?attach=1&knm=tfile.pdf",
  docName: "이력서",
  status: "서류통과",
  createdAt: new Date(),
  application_date: "2023-03-01",
  referer: "원티드",
  countDownloaded: 0,
  isUploaded: false,
  companyId: 1,
  openingId: 84400,
};

// // //--지원자 정보 DB 저장--//
// db.insert(applicantData, (err, result) => {
//   console.log("===========> ~ result:", result)
//   if (err) {
//     console.log(err);
//   } else {
//     console.log("새로운 지원자 추가완료");
//   }
// });

// const emails = ["minaShin@gmail.com", "parkcansee@naver.com", "xia@gmail.com"];
// //(복수)이메일로 지원자 찾기
// function findUsersByEmail(emails: string[]) {
// db.find({ email: { $in: emails } }, (err: Error | null, results: any[]) => {
//   // 이메일 주소에 맞는 지원자 정보를 반환
//   results.forEach((result) => {
//     if (result) {
//       console.log("===========> ~ result:", result);
//     }
//     // else {
//     //   console.log(`${email} 이메일 주소를 가진 지원자가 존재하지 않습니다.`);
//     // }
//   });
// });
// }
// findUsersByEmail(emails);

// // //--(단수)이메일로 지원자 찾기--//
// async function findOneEmail(email: string): Promise<any | null> {
//     // const emailsString = await readFileAsync(email); // JSON 형식의 문자열
//     // const emails = JSON.parse(emailsString); // JSON 문자열을 객체로 파싱

//     return new Promise((resolve, reject) => {
//       db.find({ email: email }, (err: Error | null, result: any) => {
//         if (err) {
//           reject(err);
//         } else if (result.length === 0) {
//           console.log(
//             `${email} 이메일 주소를 가진 지원자가 존재하지 않습니다.`
//           );
//           resolve(null);
//         } else {
//           resolve(result[0]);
//         }
//       });
//     });

// }
// // //--모든 정보 불러오기--//
  db.find({},function (err: Error, allApplicantData: any)  {
    // console.log("===========> ~ result:", allApplicantData);

    console.log("-------->", allApplicantData);
  });

// function isUploaded(email: string) {
//   db.find({ email: email }, (err: Error | null, candidates: any[]) => {
//     if (err) {
//       console.error("Find error :", err);
//       return;
//     }

//     if (candidates.length === 0) {
//       console.log(`${email} 이메일 주소를 가진 지원자가 존재하지 않습니다.`);
//       return;
//     }

//     // 'isUploaded' 컬럼의 값을 `true`로 변경하고, 업데이트를 수행합니다.
//     candidates.forEach((candidate) => {
//       const updateData = { $set: { isUploaded: true } };
//       db.update({ _id: candidate._id }, updateData, {}, (err, numReplaced) => {
//         if (err) {
//           console.error("Update error :", err);
//           return;
//         }
//         console.log(`Updated ${numReplaced} document(s).`);
//       });
//     });
//   });
// }

//----------------------------------------------------//
// async function register(email: string) {
//   try {
//     const existUserEmail = await findOneEmail(email);
//     if (!existUserEmail) {
//       throw Error(`${email}은 존재하지 않는 지원자입니다.`);
//     }
//     const existUserString = await readFileAsync(email); // JSON 형식의 문자열
//     const existUser = JSON.parse(existUserString); // JSON 문자열을 객체로 파싱
//     // 지원자 openingId 찾기
//     const openingId = existUser.openingId;
//     console.log("===========> ~ openingId:", openingId);
//     // 저장되는 DATA 빌드
//     const applicantData = {
//       openingId: openingId,
//       name: existUser.name,
//       email: existUser.email,
//       phone: existUser.phone,
//       referer: existUser.referer,
//       optionalTermsAgree: existUser.optionalTermsAgree,
//       documents: [
//         {
//           fileUrl: existUser.fileUrl,
//           filename: existUser.filename,
//           fileToken: existUser.fileToken,
//           docName: existUser.docName,
//         },
//       ],
//       questionnaires: [] as any[],
//       additionalApplicantInfo: null as null,
//     };
//     console.log("===========> ~ applicantData:", applicantData);
//     // const candidates = await this.findCandidates(email); // 후보자 목록 조회
//     // if (candidates.length === 0) {
//     //   console.log(`${email} 이메일 주소를 가진 지원자가 존재하지 않습니다.`);
//     //   return;
//     // }

//     // // 'isUploaded' 컬럼의 값을 `true`로 변경하고, 업데이트를 수행합니다.
//     // candidates.forEach((candidate:any) => {
//     //   const updateData = { $set: { isUploaded: true } };
//     //   db.update({ _id: candidate._id }, updateData, {}, (err, numReplaced) => {
//     //     if (err) {
//     //       console.error("Update error :", err);
//     //       return;
//     //     }
//     //     console.log(`Updated ${numReplaced} document(s).`);
//     //   });
//     // });

//     await applicantRequest(applicantData);
//   } catch (error) {
//     console.log(error);
//     throw error;
//   }
// }
// register("minaShin@gmail.com");

// async function applicantRequest(applicantData: any): Promise<AxiosResponse> {
//   const apiUrl = "https://oapi.greetinghr.com/openapi"; //todo: 환경변수처리
//   const apiKey =
//     "08dacc9b6d4f3ad04f3e31348e1627c69d8883df5eaee04ed3b78a2d8620f65c"; //todo: 환경변수처리
//   return axios.post(`${apiUrl}/applicant`, applicantData, {
//     headers: {
//       "Content-Type": "application/json",
//       "X-Greeting-OpenAPI": `${apiKey}`,
//     },
//   });
// }
